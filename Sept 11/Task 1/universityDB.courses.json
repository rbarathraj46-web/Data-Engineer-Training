use universityDB
switched to db universityDB
db.students.insertMany([
{ _id: 1, name: "Rahul Sharma", age: 21, email: "rahul@example.com", city:
"Bangalore" },
{ _id: 2, name: "Priya Singh", age: 22, email: "priya@example.com", city: "Delhi" },
{ _id: 3, name: "Aman Kumar", age: 20, email: "aman@example.com", city: "Hyderabad"
},
{ _id: 4, name: "Sneha Reddy", age: 23, email: "sneha@example.com", city: "Chennai"
}
]);

db.courses.insertMany([
{ _id: 101, title: "Database Systems", department: "CS", credits: 4 },
{ _id: 102, title: "Data Structures", department: "CS", credits: 3 },
{ _id: 103, title: "Economics 101", department: "Economics", credits: 2 },
{ _id: 104, title: "Operating Systems", department: "CS", credits: 4 }
]);

db.enrollments.insertMany([
{ student_id: 1, course_id: 101, grade: "A" },
{ student_id: 1, course_id: 103, grade: "B" },
{ student_id: 2, course_id: 101, grade: "A" },
{ student_id: 3, course_id: 102, grade: "C" },
{ student_id: 4, course_id: 104, grade: "B" }
]);
{
  acknowledged: true,
  insertedIds: {
    '0': ObjectId('68c28fef80814b9950d1bc78'),
    '1': ObjectId('68c28fef80814b9950d1bc79'),
    '2': ObjectId('68c28fef80814b9950d1bc7a'),
    '3': ObjectId('68c28fef80814b9950d1bc7b'),
    '4': ObjectId('68c28fef80814b9950d1bc7c')
  }
}
db.students.insertOne({_id: 5, name: "Deepak Kumar", age: 24,email: "deepak@example.com", city: "Pune"});
{
  acknowledged: true,
  insertedId: 5
}
db.students.find();
{
  _id: 1,
  name: 'Rahul Sharma',
  age: 21,
  email: 'rahul@example.com',
  city: 'Bangalore'
}
{
  _id: 2,
  name: 'Priya Singh',
  age: 22,
  email: 'priya@example.com',
  city: 'Delhi'
}
{
  _id: 3,
  name: 'Aman Kumar',
  age: 20,
  email: 'aman@example.com',
  city: 'Hyderabad'
}
{
  _id: 4,
  name: 'Sneha Reddy',
  age: 23,
  email: 'sneha@example.com',
  city: 'Chennai'
}
{
  _id: 5,
  name: 'Deepak Kumar',
  age: 24,
  email: 'deepak@example.com',
  city: 'Pune'
}
db.students.find({city: "Delhi"});
{
  _id: 2,
  name: 'Priya Singh',
  age: 22,
  email: 'priya@example.com',
  city: 'Delhi'
}
db.students.updateOne({name: "Aman Kumar"},{$set: {email: "amankumar.1@newmail.com"}});
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}
db.students.find({email});
ReferenceError: email is not defined
db.students.deleteOne({name: "Sneha Reddy"});
{
  acknowledged: true,
  deletedCount: 1
}
db.students.createIndex({email: 1}, {unique: true});
email_1
db.courses.createIndex({department: 1}, {credits: 1});
department_1
db.courses.createIndex({department: 1, credits: 1});
department_1_credits_1
db.students.getIndexes();
[
  { v: 2, key: { _id: 1 }, name: '_id_' },
  { v: 2, key: { email: 1 }, name: 'email_1', unique: true }
]
db.courses.getIndexes();
[
  { v: 2, key: { _id: 1 }, name: '_id_' },
  { v: 2, key: { department: 1 }, name: 'department_1' },
  {
    v: 2,
    key: { department: 1, credits: 1 },
    name: 'department_1_credits_1'
  }
]
db.courses.find({department: "CS", credits: 4});
{
  _id: 101,
  title: 'Database Systems',
  department: 'CS',
  credits: 4
}
{
  _id: 104,
  title: 'Operating Systems',
  department: 'CS',
  credits: 4
}
db.courses.find({title: "Database Systems"});
{
  _id: 101,
  title: 'Database Systems',
  department: 'CS',
  credits: 4
}
db.courses.find({credits: {$gt: 3}}).sort({credits: -1}).explain ("executionStats");
{
      type: 'simple',
      totalDataSizeSorted: 213,
      usedDisk: false,
      spills: 0,
      spilledDataStorageSize: 0,
      inputStage: {
        stage: 'COLLSCAN',
        filter: {
          credits: {
            '$gt': 3
          }
        },
        nReturned: 2,
        executionTimeMillisEstimate: 0,
        works: 5,
        advanced: 2,
        needTime: 2,
        needYield: 0,
        saveState: 1,
        restoreState: 1,
        isEOF: 1,
        direction: 'forward',
        docsExamined: 4
      }
    }
  },
  queryShapeHash: 'CD2AA08E4F77513DDC922BF565C031D8C910F3F665FC263373DFE0B0905C9CD5',
  command: {
    find: 'courses',
    filter: {
      credits: {
        '$gt': 3
      }
    },
    sort: {
      credits: -1
    },
    '$db': 'universityDB'
  },
  serverInfo: {
    host: '1855f64c282f535',
    port: 27017,
    version: '8.0.13',
    gitVersion: '8dc5cd2a30c4524132e2d44bb314544dc477e611'
  },
  serverParameters: {
    internalQueryFacetBufferSizeBytes: 104857600,
    internalQueryFacetMaxOutputDocSizeBytes: 104857600,
    internalLookupStageIntermediateDocumentMaxSizeBytes: 104857600,
    internalDocumentSourceGroupMaxMemoryBytes: 104857600,
    internalQueryMaxBlockingSortMemoryUsageBytes: 104857600,
    internalQueryProhibitBlockingMergeOnMongoS: 0,
    internalQueryMaxAddToSetBytes: 104857600,
    internalDocumentSourceSetWindowFieldsMaxMemoryBytes: 104857600,
    internalQueryFrameworkControl: 'trySbeRestricted',
    internalQueryPlannerIgnoreIndexWithCollationForRegex: 1
  },
  ok: 1
}
db.enrollments.aggregate([
  {$group: { _id: "$course_id", studentCount: {$sum: 1}}}
]);
{
  _id: 101,
  studentCount: 2
}
{
  _id: 103,
  studentCount: 1
}
{
  _id: 102,
  studentCount: 1
}
{
  _id: 104,
  studentCount: 1
}
db.students.aggregate([
  {$group: {_id: "$city", avgAge: {$avg: "$age"}}}
]);
{
  _id: 'Delhi',
  avgAge: 22
}
{
  _id: 'Hyderabad',
  avgAge: 20
}
{
  _id: 'Pune',
  avgAge: 24
}
{
  _id: 'Bangalore',
  avgAge: 21
}
db.enrollments.aggregate([
  {
    $lookup: {
      from: "students",
      localfield: "student_id",
      as: "student_info"
    }
  }
]);
MongoServerError[FailedToParse]: unknown argument to $lookup: localfield
db.enrollments.aggregate([
  {
    $lookup: {
      from: "students",
      localfield: "student_id",
      foriegnField: "_id",
      as: "student_info"
    }
  }
]);
MongoServerError[FailedToParse]: unknown argument to $lookup: localfield
db.enrollments.aggregate([
  {
    $lookup: {
      from: "students",
      localfield: "student_id",
      foreignField: "_id",
      as: "student_info"
    }
  }
]);
MongoServerError[FailedToParse]: unknown argument to $lookup: localfield
db.enrollments.aggregate([
  {
    $lookup: {
      from: "students",
      localField: "student_id",
      foreignField: "_id",
      as: "student_info"
    }
  }
]);
{
  _id: ObjectId('68c28fef80814b9950d1bc78'),
  student_id: 1,
  course_id: 101,
  grade: 'A',
  student_info: [
    {
      _id: 1,
      name: 'Rahul Sharma',
      age: 21,
      email: 'rahul@example.com',
      city: 'Bangalore'
    }
  ]
}
{
  _id: ObjectId('68c28fef80814b9950d1bc79'),
  student_id: 1,
  course_id: 103,
  grade: 'B',
  student_info: [
    {
      _id: 1,
      name: 'Rahul Sharma',
      age: 21,
      email: 'rahul@example.com',
      city: 'Bangalore'
    }
  ]
}
{
  _id: ObjectId('68c28fef80814b9950d1bc7a'),
  student_id: 2,
  course_id: 101,
  grade: 'A',
  student_info: [
    {
      _id: 2,
      name: 'Priya Singh',
      age: 22,
      email: 'priya@example.com',
      city: 'Delhi'
    }
  ]
}
{
  _id: ObjectId('68c28fef80814b9950d1bc7b'),
  student_id: 3,
  course_id: 102,
  grade: 'C',
  student_info: [
    {
      _id: 3,
      name: 'Aman Kumar',
      age: 20,
      email: 'amankumar.1@newmail.com',
      city: 'Hyderabad'
    }
  ]
}
{
  _id: ObjectId('68c28fef80814b9950d1bc7c'),
  student_id: 4,
  course_id: 104,
  grade: 'B',
  student_info: []
}
db.students.aggregate([
  {
    $lookup: {
      from: "enrollments",
      localfield: "_id",
      foreignField: "student_id",
      as: "enrollments"
    }
  }
]);
MongoServerError[FailedToParse]: unknown argument to $lookup: localfield
db.students.aggregate([
  {
    $lookup: {
      from: "enrollments",
      localfield: "_id",
      foreignField: "student_id",
      as: "enrollments"
    }
  },
  {
    $lookup: {
      from: "courses",
      localField: "enrollments.course_id",
      foreignField: "_id",
      as: "courses"
    }
  }
]);
MongoServerError[FailedToParse]: unknown argument to $lookup: localfield
db.students.aggregate([
  {
    $lookup: {
      from: "enrollments",
      localField: "_id",
      foreignField: "student_id",
      as: "enrollments"
    }
  },
  {
    $lookup: {
      from: "courses",
      localField: "enrollments.course_id",
      foreignField: "_id",
      as: "courses"
    }
  }
]);
{
  _id: 1,
  name: 'Rahul Sharma',
  age: 21,
  email: 'rahul@example.com',
  city: 'Bangalore',
  enrollments: [
    {
      _id: ObjectId('68c28fef80814b9950d1bc78'),
      student_id: 1,
      course_id: 101,
      grade: 'A'
    },
    {
      _id: ObjectId('68c28fef80814b9950d1bc79'),
      student_id: 1,
      course_id: 103,
      grade: 'B'
    }
  ],
  courses: [
    {
      _id: 103,
      title: 'Economics 101',
      department: 'Economics',
      credits: 2
    },
    {
      _id: 101,
      title: 'Database Systems',
      department: 'CS',
      credits: 4
    }
  ]
}
{
  _id: 2,
  name: 'Priya Singh',
  age: 22,
  email: 'priya@example.com',
  city: 'Delhi',
  enrollments: [
    {
      _id: ObjectId('68c28fef80814b9950d1bc7a'),
      student_id: 2,
      course_id: 101,
      grade: 'A'
    }
  ],
  courses: [
    {
      _id: 101,
      title: 'Database Systems',
      department: 'CS',
      credits: 4
    }
  ]
}
{
  _id: 3,
  name: 'Aman Kumar',
  age: 20,
  email: 'amankumar.1@newmail.com',
  city: 'Hyderabad',
  enrollments: [
    {
      _id: ObjectId('68c28fef80814b9950d1bc7b'),
      student_id: 3,
      course_id: 102,
      grade: 'C'
    }
  ],
  courses: [
    {
      _id: 102,
      title: 'Data Structures',
      department: 'CS',
      credits: 3
    }
  ]
}
{
  _id: 5,
  name: 'Deepak Kumar',
  age: 24,
  email: 'deepak@example.com',
  city: 'Pune',
  enrollments: [],
  courses: []
}
db.enrollments.aggregate([
  {$match: {grade: "A"}},
  {$count: "studentsWithGradeA"}
]);
